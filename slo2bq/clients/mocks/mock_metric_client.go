// Code generated by MockGen. DO NOT EDIT.
// Source: slo2bq/clients (interfaces: MetricClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v3 "google.golang.org/genproto/googleapis/monitoring/v3"
	reflect "reflect"
)

// MockMetricClient is a mock of MetricClient interface
type MockMetricClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricClientMockRecorder
}

// MockMetricClientMockRecorder is the mock recorder for MockMetricClient
type MockMetricClientMockRecorder struct {
	mock *MockMetricClient
}

// NewMockMetricClient creates a new mock instance
func NewMockMetricClient(ctrl *gomock.Controller) *MockMetricClient {
	mock := &MockMetricClient{ctrl: ctrl}
	mock.recorder = &MockMetricClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricClient) EXPECT() *MockMetricClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockMetricClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockMetricClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricClient)(nil).Close))
}

// ListTimeSeries mocks base method
func (m *MockMetricClient) ListTimeSeries(arg0 context.Context, arg1 *v3.ListTimeSeriesRequest) ([]*v3.TimeSeries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeSeries", arg0, arg1)
	ret0, _ := ret[0].([]*v3.TimeSeries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimeSeries indicates an expected call of ListTimeSeries
func (mr *MockMetricClientMockRecorder) ListTimeSeries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeSeries", reflect.TypeOf((*MockMetricClient)(nil).ListTimeSeries), arg0, arg1)
}
